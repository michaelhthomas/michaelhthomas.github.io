{"hash":"6269167d75c3f303ba2f2ae00368b6458c93b953","data":{"tag":{"title":"Linux","belongsTo":{"edges":[{"node":{"title":"Using ZSH with Toolbox on Fedora Silverblue 33","path":"/using-zsh-with-toolbox-on-fedora-silverblue-33/","date_published":"19. November 2020","timeToRead":3,"description":"Setup your own customized shell within Fedora Toolbox, all while maintaining convenience features from the default shell.","content":"<p>Fedora Silverblue is one of the most interesting Linux distros I have tried to date, and I ended up choosing to use it as my daily-driver for its stability, ease of updates, and cleanliness. However, one of my biggest must-haves was a proper, customized shell. </p>\n<p>My personal choice of shell is ZSH with the <a href=\"https://github.com/zimfw/zimfw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zim Framework</a>, giving me a fast and simple shell experience without too much hassle. However, the basic installation steps for these differ a bit on Fedora Silverblue. </p>\n<h2 id=\"installation\"><a href=\"#installation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<p>First, install <code class=\"language-text\">zsh</code> as a layered package on the host system with rpm-ostree:</p>\n<pre class=\"language-text\"><code class=\"language-text\">sudo rpm-ostree install zsh</code></pre>\n<p>After doing so, go ahead and reboot to enter the new ostree deployment, which will now contain zsh.</p>\n<p>Next, we'll go ahead and install zsh in toolbox. Enter the toolbox with <code class=\"language-text\">toolbox enter</code> and then install <code class=\"language-text\">zsh</code> the old fashioned way:</p>\n<pre class=\"language-text\"><code class=\"language-text\">sudo dnf install zsh</code></pre>\n<p>Now that we've got zsh installed everywhere, type <code class=\"language-text\">exit</code> to get back to the host system. Since <code class=\"language-text\">chsh</code> is not included on Silverblue, we'll use <code class=\"language-text\">usermod</code> instead to switch to our shiny new shell:</p>\n<pre class=\"language-text\"><code class=\"language-text\">sudo usermod --shell $(which zsh) $USER</code></pre>\n<p>Alternatively, Fedora offers <code class=\"language-text\">lchsh</code> which provides a similar interface to <code class=\"language-text\">chsh</code> on other Linux systems. </p>\n<p>Start a new shell and you should be greeted by the ZSH first time configuration, which will look something like this:\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 869 451' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1164167a3d1ce10a4a3e10932d500910'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1164167a3d1ce10a4a3e10932d500910)' width='869' height='451' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAhCAYAAABpwa0hAAAACXBIWXMAAAsSAAALEgHS3X78AAALi0lEQVRo3q3Z2W4dRw4G4PMGczMIEseyLMur9n219t2yJcvymjhOkGDmboC8zCCP21Mfu3jUPpEdDZCLQndXV7FY5M%2bf7Oreux9%2bbHYODpvj5y%2bavaPjZmtvv5mYmWsOT06bnf3DZu/wqHkyOd3sl3cnZczU3EL0rTzdbOaXVprzV5cxf2J6tnn24ixkmHd48ixkud89OGpmF5aa49PnRc5J83Rrp/S1YxaWV5sHT8abew8fN6OPnvTb4PNN%2br50/7XWm1tcbuaLEhTd2N5tltbW202Wjaw83WiW1542Y1PTzdPtnWZzZ68ZLxtd29wKo0zMzDbrW9vN6sZmc//xWLOyvtEsrq43c0vLIc87fTY%2bPb/YHJXrajHc4spavLOeseZS5r72%2bMmNFP%2brdmMD3B4ZbW7fvRdtqNx/PzwS1%2b%2bGhsv9vXi%2bc%2b9%2bc%2bvO3Rjj/rtyb0z2e7774FF5fzXf9VZp5tyq48l0HR59EP3kk0HZu/cfxn3K1YzLd%2b71jZR1tHbs/c/m5Bjjb2qE3lLx2FLxMo%2bGF4uHltefhrfXNrYCBTzmKjRmCpTT6wulH0JAenx6pnhzJZBizGxBljnzyytl7FZjHXOs83BsIlA2OTsfV4pAIkQIJwgzN9c01zrQBIHa%2buZ2rEVH4UT24upa6EKvNMJfGsCE7f2DEKrD4tt7B9Hn/uXl63h2b4OuYpcRKLG1u9%2b8//FjbMDmdgs/UMrGyMiWY4UYDy6srLbGLUrznNA5enbaPD9/2by4eFXun8e641MzcT04fhYcJFwZ7qTwDf4x/qyMf3Z2Hk578fIiwozMGxmApSgELprYJ4x1KfX8/CJIz5WHKJmeOS3jLDhWlKQcxfeDO1pOoATyO3l%2bFmMZ7vj0RSHL83jGCzaAPMklixyGNI8%2bCXmytGtDoBMy/3cIDHbwiJBIiLImz%2bufnJ0L1hYij8YnA%2bqMBNI84910mcc43pPHOPoXahgJCdkD%2bXnnOddkfOPM12SHIMdizCTKv50Ek2ASAQhLSyL69vZwnyCRWpJiEqBmfkuSo7Xd6xMXL5nz3ZCxI31P3q5EGWRJTrl%2be/tOzM33Q9XLSZzp/Zts8MYG4M3tyP2zMUmeFnO8yyunBaKL4ZXZgKnQwBeQ4Xm/1g5yPSKK9LazG94V9/hgc3cv4O/eGjxrLLiTJ7RwkTGJODFPDrn7xydBgnSYmpvvG%2bHvaMUAG6EghSm3Ve7FPGiK0agHyhhxKX5t2FjMflgMIH4pSgZjIro2K8yWTZyEPJtlLAZ4UOFsrPcMtnd4HASm%2bEKOMgijcgQ%2bQnYMM1P0EZY3RcGNDADKAdlKhN/Lz7Uu8C7zOgi2cO2GQAvhDJE7OSbC5EFfRtYAntu8/qhfH2QotLXIaIwd%2biw8ruR3SS43360TXLNlyAy%2by/4M%2bR4vg/rjiakQyPMIEOQQ0nSQ4VxYn1e9Fx4QoY/HjPfsmrWBMWSTq19m4FnkSI50aGxbMyyFZ72bnl9oCdW7kL/Wrxc8Gz%2bzsBgoshFz6BTEXcZZ01UfpJKNcMnV6EAnzdyoA0DbAiyihAVr8Hb/4eNP7XfCYVsay/OXb98FzEHb/as3b/uFzpv3HwKykaNLWrOgeNZvHGMqXF6/ex%2bhBupS4svLN2FsaZHMtx9%2biHvjwljFKORIx/I%2bQ/AoYwpL6%2bErqZS%2bF6/fRLYRZubYk%2b8eTUgzikzTA8fhTi1wp8Ily06ElXk4rp13YJ4ZZDBfD8IwoZstZSSEebQL59Qp83tXfoZAthjXWfP6ELCXsT%2bFTw8UQCVzLsvI6/pd9T0s78DFGG2yWM471jeO8g/H2nfdccY8Gp%2bIq2acUGnDooV8zC1j9bVzxvu6UBD8oSjl5bt8Dv3Ir8/2kuvEPsoaZKexBtNkD8yVu9O1Jse62Pfs4jIghOHB8OOnn6NgUdZKXUJGRQd6YvPHT58CblKZGJS6QNk80Ad1sNUHptKbWMYNSmnwNveyrKUM9m2BAOl18fptCZOXEVLrW239r0%2bY0oM80KancfRjXM9SrfsvZYxeWjIrLaQWRFKJMOtwz0hE/FDaON8F0h6iCWKrPKDhC6kNV%2bTnLxnIyQePvvh2OGjPC7wnEwHyotog6orN9pPaPBuDiERNbiIRm95Pgsx9fS1t9rqxpINV1eEmye02aXGxIxcnQmyMVxESlPhoQZQHxYvxbrc9DJHveez81esgPUpawz2D8FAcktTNLVbWtyaEOUPYr/VC1BJFn9xMN5aTCwZh3h1zLQKSWHKwb/QukQx3CCVrhjsD5WyO737LxzlDzd1tSTzajCRh1fqiL6/O6ZJjnhl03%2becJMQgzUp02UYGnv/SAMhoqX7Q5MeQ%2bJOuknBA9cnkVJDfZP3Q0ZCTGDXXkRjPmTMWNcF8v3bgdVfjMrOs1rpAP5ga0xLeUhCXZwjx3NYOM5EOlcneKYvNk8qMy7EpR3%2bS59eM0ENqiGmqxhYSyTogv/Q8y6snNb8iIzwh774qcy0s18r1sgjYvnj5qtYPR/Ht/stvv0VcJ4MLHySFIBkLkeEavGEDwo885CYsvBNeh3FmcBG5X9wj648//9L88NOn2MeVrmehr1LeHr5khF5CJkMgYdSNp3zOPgt3c253XheWw6NXfbzYLUFzfpBWZ40sybt5v5vPc82R/rjHn/Xn3LzPzX/pwLTXP5CshUjmbH2P6jVh3YdT3VA3e3Rb9svpOb99nmie1Lqh%2b43fze1ZG3Rzfc7XsoTtbkSfMO3qkLrmul8OgcLomctZDnxACdR265G4UnWnhApBIKpukPPBFDTlcTW7FGb%2bWZEnpCK3Fzm%2b8sSvuBQWoOz0CNQ9S3dncZp0ErroR3jS7q//%2bneEmtrAfHPBm97GCZ08G8Qn3kUIn7QhI8QjbMo4vDZ4VhiV4GQ9fWGhSFsl1WQtgKwsoCaQmqQjca6o0S9Pi3nkY4zYRj6LWRPUQ1YfK4jMJiirn1GkUOPyoDPqjMj7q/Uccrk9i9xoj%2bKN4RipOg5hS8pdqgemuAIfkRtnlqUheHscr9XuVzkAXHhLzrawTfCMnK7xuIqPMjasIGJdnrYxKIncXxTiTQR1FO9PgrRUltpR/dA6rB6ipLWRpY3QwQcakqSDOTxuDCKFSCGpT41Ann6kSU%2b60DUPd7MYuo4Ie4PHSFibBXmRkgS593MkFC%2bVWx6OsLBNq%2bAmK%2bR5FNQgIQ9VGIMckCabB8lSBcaZYfEc2FLeRlwZDEroZRPY3JrbYeSDGIc8kwCvI8Ekzq8dlf3JAIv1UBL8QTC/1W3a5iDDPRTgDfCdqgeh4Jh/j8ASWfFuHqHzmuPzPFgl3xh9xggrxiSTMV3bemOp/ycpwycPVbuEOkiug8/XkuBV9dW%2b/L6evmTLaiwOPuspjTn5p6j9%2b3M1Lv/25GHpVeV3VdUN3bs6KO2eGA11Kr6UY638ExVz6rrdKnG48wmfMuwn%2b/KQdrA8DgPweB50UjZ%2bbBTPaEls4Muj4hEEeYVHIQJceYf3s5aHAn1iNz9KAr6VuXm/T1IlJMQ9HXg6iU4IqTKhApvr53XvyIAsa3omA5GTk3IRHzR57xule5b4%2baFo2ZiTFxD2hYVU8ACFCHFijJSMIzjGFmMZgw8YgVH8APU%2bx4l7CmQ8grOUF%2bFVlAkCK2NAGrTFOFIkP/9K5UcRIsZBynRjhAxHOTVKAmSc5A560Z1h7Md8cq4NgbaIaA8MbCb%2b8JScGf/ZihHk4PgTVDZNkEni87zUAuPVEJS2EE4IRG213jTXJnmfF0/rX6D4%2b1SuDJTHWt/cGmr%2b8/vvzX//%2bKP5xz%2b/%2bYzMQLitCtsProR2fmR1T7HygywrxAi3r4UAgsj86GqzmebycBGrg%2bB0PTeMw9EC7/YXefvzkrV9xHierIeTjtzzQNPzdP9QcymIEGyzcqQsI6n9baJbYX7p/trnAQ/f74y5DgH/A9wBCWRUWxTlAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"869\" alt=\"Zsh first time config\" data-srcset=\"/assets/static/image.82a2fbd.634d41da8b4ced823678122f9c298cb9.png 480w, /assets/static/image.372248f.634d41da8b4ced823678122f9c298cb9.png 869w\" data-sizes=\"(max-width: 869px) 100vw, 869px\" data-src=\"/assets/static/image.372248f.634d41da8b4ced823678122f9c298cb9.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image.372248f.634d41da8b4ced823678122f9c298cb9.png\" width=\"869\" alt=\"Zsh first time config\"></noscript>\nIf you've made it here, congratulations! Zsh is now installed and working.</p>\n<h2 id=\"customization\"><a href=\"#customization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Customization</h2>\n<p>Silverblue's default bash shell contains some important tweaks which, for example, provide the purple indicator present when inside the toolbox. These tweaks are a must-have for me, so I'll be implementing them in my prompt theme for zsh. First, though, I'll install my zsh framework of choice, Zim: </p>\n<pre class=\"language-text\"><code class=\"language-text\">curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh</code></pre>\n<p>These next steps may differ a bit depending on the framework you choose, but the principles are the same. Currently, there is no way of knowing whether or not the shell is running inside toolbox, so we'll start by fixing that. </p>\n<p>The default Silverblue bash config uses a function that looks something like this to return whether or not toolbox is active: </p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f /run/.containerenv <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> -f /run/.toolboxenv <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[35m\\]â¬¢\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[0m\\]%s\"</span> <span class=\"token string\">\"[\\u@\\h \\W]<span class=\"token entity\" title=\"\\\\\">\\\\</span>$ \"</span><span class=\"token variable\">)</span></span></code></pre>\n<p>In other words, the presence of /run/.containerenv and /run/.toolboxenv is what indicates that the shell is running inside toolbox. We can use this in our zsh config to append the purple â¬¢ symbol, albeit a bit more elegantly.</p>\n<p>I took my prompt theme of choice, gitster, and duplicated its folder in ~/.zim/modules (this process will be similar for oh-my-zsh and others). I then edited my new prompt theme and added a function to detect the toolbox:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function-name function\">_prompt_toolbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f /run/.containerenv <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> -f /run/.toolboxenv <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    print -n <span class=\"token string\">\"%F{magenta}â¬¢ \"</span>\n    <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This function uses the same detection logic as the bash version, and uses the much more elegant <code class=\"language-text\">%F{}</code> zsh color syntax to switch the color to magenta before outputting the â¬¢ character. Next, when the prompt variable, PS1, is defined at the end of the theme file, I added a call to <code class=\"language-text\">_prompt_toolbox()</code> at the beginning, resulting in the proper output of the indicator if and only if toolbox is active. </p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'<span class=\"token variable\"><span class=\"token variable\">$(</span>_prompt_toolbox<span class=\"token variable\">)</span></span>%(?:%F{green}:%F{red})â <span class=\"token variable\"><span class=\"token variable\">$(</span>_prompt_gitster_pwd<span class=\"token variable\">)</span></span><span class=\"token variable\">${(e)git_info<span class=\"token punctuation\">[</span>prompt<span class=\"token punctuation\">]</span>}</span>%f '</span></code></pre>\n<p>Now, time to test it out! I saved my new custom theme and enabled it in <code class=\"language-text\">~/.zimrc</code>. After running <code class=\"language-text\">zim compile</code> to build my new theme, I restarted zsh and was greeted with the same prompt as before. This time, though, entering the toolbox presented that small, purple indicator; finally giving me the beauty of a custom shell combined with the helpful utility that Silverblue's default configuration provides. </p>\n"}},{"node":{"title":"NixOS Configuration Notes","path":"/nix-os-configuration-notes/","date_published":"5. April 2021","timeToRead":3,"description":"","content":"<p>I recently began using NixOS, a declarative, immutable Linux distro, as my daily driver. NixOS has a configuration file, <code class=\"language-text\">configuration.nix</code>, which allows me to configure the entire operating system's state, packages, and configuration in a single, commitable file. </p>\n<p>If you'd like to take a peek at exactly what that looks like, this git repo contains the entirety of my system configurations: <a href=\"https://git.thomasfamily.duckdns.org/michael/nix-dots\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://git.thomasfamily.duckdns.org/michael/nix-dots</a>. </p>\n<p>I'll go ahead and explain what makes this so useful in a single line:</p>\n<pre class=\"language-text\"><code class=\"language-text\">virtualisation.docker.enable = true;</code></pre>\n<p>With this single line in my <code class=\"language-text\">configuration.nix</code>, docker is now installed and running on my system. Really. No adding a repo, fiddling with the package manager, or enabling services. It just works. </p>\n<p>Adding a few more lines gets me a full system configuration which has everything just the way I like it, with the ability to upgrade and roll-back at will, as well as even provision another system with the exact same settings. </p>\n<p>But this isn't just any old configuration file. You may have noticed the <code class=\"language-text\">.nix</code> extension used on our system configuration file. This file extension is for the <a href=\"https://nixos.wiki/wiki/Nix_Expression_Language\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Nix Expression Language</strong></a><strong>,</strong> a language designed specifically for use with the Nix package manager, and by extension, NixOS. From the docs:</p>\n<blockquote>\n<p>The Nix expression language is a pure, lazy, functional language. Purity means that operations in the language don't have side-effects (for instance, there is no variable assignment). Laziness means that arguments to functions are evaluated only when they are needed. Functional means that functions are ânormalâ values that can be passed around and manipulated in interesting ways. The language is not a full-featured, general purpose language. Its main job is to describe packages, compositions of packages, and the variability within packages.</p>\n</blockquote>\n<p>Nix is a language that is both incredibly powerful and a bit challenging to learn. Unfortunately, the documentation can be lacking at times, and I ended up having to read through package definitions and other users' configs to get an idea of both how to use the language and the options that are available. Once you've got a hold on it, though, Nix will quickly become your new best friend. </p>\n<p>For a quick intro to the Nix language, <a href=\"https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nix By Example</a> is a wonderful resource to get you started. Some basic knowledge of the syntax is definitely helpful in putting together a working config. </p>\n<p>Below are a few notes, tips, and tricks from my experience getting into NixOS as a beginner.</p>\n<h2 id=\"getting-started-with-home-manager\"><a href=\"#getting-started-with-home-manager\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting Started with Home Manager</h2>\n<p><a href=\"https://github.com/nix-community/home-manager\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Home Manager</a> is an incredibly powerful tool for extending the declarative Nix approach to the userland, and brings with it configuration options for nearly everything. </p>\n<p>To get started with Home Manager, read over the <a href=\"https://github.com/nix-community/home-manager/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">README</a> and follow the installation instruction there. Be sure to add the home-manager channel which corresponds with your NixOS version. Once you've done that, go ahead and open your configuration at <code class=\"language-text\">~/.config/nixpkgs/home.nix</code>. </p>\n<h2 id=\"setting-a-custom-shell\"><a href=\"#setting-a-custom-shell\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setting a Custom Shell</h2>\n<p>In order to set a custom shell as the default shell for a user, you'll have to set it in configuration.nix. First ensure the shell is enabled, i'll be using zsh in this example: <code class=\"language-text\">programs.zsh.enable = true;</code>. Next, set the user's shell property to the shell package in use: <code class=\"language-text\">users.users.{yourName}.shell = pkgs.zsh;</code>. After running <code class=\"language-text\">nixos-rebuild switch</code> and rebooting, zsh should now be your user's default shell. </p>\n<h2 id=\"visual-studio-code\"><a href=\"#visual-studio-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Visual Studio Code</h2>\n<p>Visual Studio Code, my editor of choice, can be both installed and configured through Home Manager, making it easy to keep consistent configurations across systems. For example, the following configuration will install the Nix extension for proper syntax highlighting &#x26; code editing features, as well as configure some editor settings like the default font and tab size. </p>\n<pre class=\"language-nix\"><code class=\"language-nix\"><span class=\"token punctuation\">{</span> config<span class=\"token punctuation\">,</span> pkgs<span class=\"token punctuation\">,</span> libs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">{</span>\n  programs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    vscode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      enable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      extensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        pkgs<span class=\"token punctuation\">.</span>vscode<span class=\"token operator\">-</span>extensions<span class=\"token punctuation\">.</span>bbenoist<span class=\"token punctuation\">.</span>Nix\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      userSettings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"editor.fontFamily\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"'FiraCode Nerd Font', 'Droid Sans Mono', 'monospace'\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token string\">\"editor.tabSize\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">vscode.nix</code></p>\n"}}]}}},"context":{}}